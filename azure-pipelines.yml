trigger:
- master
- features/*
- release/*

variables:
  # Build settings
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE : true    # do not populate NuGet caches on build agents (VM will be deleted afterwards anyways)
  configuration: Release                      # the configuration (Debug/Release) to build
  dotNetSdk_Version: 2.1.505                  # the version of the .NET SDK to use
  solutionPath : src/MdDocs.sln               # The path of the solution to be buildt
  artifactsName: drop
  # MyGet.org settings   
  myget_publish: true                                       # enable publishing of master and release branches to MyGet.org
  myget_ServiceConnectionName: 'MyGet - ap0llo-mddocs'   # the name of the Azure DevOps service connection to use for MyGet.org
  # NuGet.org settings
  nuget_org_publish: true                                   # enable publishing of release branches to NuGet.org
  nuget_org_ServiceConnectionName: 'NuGet.org - mddocs'     # the name of the Azure DevOps service connection to use for NuGet.org
  nuget_org_PackageName: 'Grynwald.MdDocs'                  # the name of the package being published
  # GitHub settings
  github_createRelease: true                          # enable creation of GitHub releases when a package was uploaded to NuGet.org
  github_ServiceConnectionName: 'GitHub: ap0llo'      # the name of the Azure DevOps service connection to use for creating GitHub releases
  github_repositoryName: 'ap0llo/mddocs'              # the name of the github repo to create the release in  

jobs:

# Main Build and test job: Builds the projects and runs all tests
- job: Build_and_Test
  pool: Hosted VS2017
  steps:

  # Install .NET Core SDK (version specified in the variables section)
  - task: DotNetCoreInstaller@0
    displayName: Install .NET Core SDK
    inputs:
      version: $(dotNetSdk_Version)

  # Set the build number (utilizes Nerdbank.GitVersioning)
  - task: DotNetCoreCLI@2
    displayName: Install NBGV tool    
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path . nbgv
  - script: nbgv cloud
    displayName: Set Version

  # Restore, Build, Test
  - task: CmdLine@2
    displayName: Restore NuGet packages
    inputs:
      script: dotnet restore $(solutionPath)
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: $(solutionPath)
      arguments: '--configuration $(configuration) --no-restore'  
  - task: DotNetCoreCLI@2
    displayName: Test
    inputs:
      command: test
      projects: $(solutionPath)
      arguments: '--configuration $(configuration) --no-build'
  
  # Create NuGet Package and  publish as build artifact
  - task: DotNetCoreCLI@2
    displayName: Pack NuGet package
    inputs:
      command: pack
      projects: $(solutionPath)
      arguments: '--configuration $(configuration) --output $(Build.ArtifactStagingDirectory) --no-build'  
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifacts'
    inputs:
      artifactName: $(artifactsName)

# Job to push package to MyGet.org after build
- job: Publish_to_MyGet
  pool: Hosted VS2017
  # Only run after main build job and only if the current branch is master or a release branch
  dependsOn: Build_and_Test
  condition: and('$(myget_publish)', succeeded('Build_and_Test'), or(eq(variables['build.sourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/') ))
  steps:
  # Get artifacts
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs: 
      buildType: current
      downloadType: single
      artifactName: $(artifactsName)
      downloadPath: $(Build.ArtifactStagingDirectory)
  # Upload to MyGet.org
  - task: NuGetCommand@2
    displayName: "Upload package"
    inputs:
      command: push
      nugetFeedType: external
      publishFeedCredentials: $(myget_ServiceConnectionName)

# Job to push package to NuGet.org after build (only for builds of release branches)
- job: Publish_to_NuGet_org
  pool: Hosted VS2017
  # Only run after main build job and only if the current branch is a release branch
  dependsOn: Build_and_Test
  condition: and('$(nuget_org_publish)', succeeded('Build_and_Test'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))
  steps:
  # Get artifacts
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs: 
      buildType: current
      downloadType: single
      artifactName: $(artifactsName)
      downloadPath: $(Build.ArtifactStagingDirectory)
  # Upload to NuGet.org
  - task: NuGetCommand@2
    displayName: 'Upload package to NuGet.org'
    inputs:
      command: push
      nugetFeedType: external
      publishFeedCredentials: $(nuget_org_ServiceConnectionName)

# Job to create a GitHub release (only if a package was uploaded to NuGet.org)
- job: Create_GitHub_Release
  pool: Hosted VS2017
  # Only run if build was successful and a package was uploaded to nuget.org
  dependsOn: 
  - Build_and_Test
  - Publish_to_NuGet_org
  condition: and('$(github_createRelease)', succeeded('Build_and_Test'), succeeded('Publish_to_NuGet_org'))
  steps:

  # Install .NET Core SDK (version specified in the variables section)
  - task: DotNetCoreInstaller@0
    displayName: Install .NET Core SDK
    inputs:
      version: $(dotNetSdk_Version)

  # Set the build number (utilizes Nerdbank.GitVersioning). 
  # This step is necessary as $(Build.BuildNumber) is used as name of the GitHub release
  - task: DotNetCoreCLI@2
    displayName: Install NBGV tool    
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path . nbgv
  - script: nbgv cloud
    displayName: Set Version

  # Get build artifacts and create a GitHub release
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs: 
      buildType: current
      downloadType: single
      artifactName: $(artifactsName)
      downloadPath: $(Build.ArtifactStagingDirectory)
  - task: GithubRelease@0
    inputs:
      gitHubConnection: $(github_ServiceConnectionName)
      repositoryName: $(github_repositoryName)
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: manual
      tag: v$(Build.BuildNumber)
      releaseNotesSource: inputs
      releaseNotes: 'Automatic release by Azure DevOps. Package available on [NuGet.org](https://www.nuget.org/packages/$(nuget_org_PackageName)/$(Build.BuildNumber))'
      assets: $(Build.ArtifactStagingDirectory)/$(artifactsName)/*.nupkg
      addChangeLog: true

      