<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DemoProject</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "T:DemoProject.DemoAttribute" -->
        <member name="T:DemoProject.DemoClass">
            <summary>
            A class meant to demonstrate how the generated documentation looks like.
            </summary>
            <remarks>
            The main purpose of this class is to showcase the generated documentation.
            <para>
            For that purpose, the class aims to include as many code constructs relevant
            for the generated documentation as possible.
            </para>    
            <para>   
            For every type, MdDoc will create a separate markdown page split into multiple sections.
            </para>
            <para>
            The type page starts with the "definition" section that provides basic info about the type.
            This includes the type's namespace and assembly as well as the inheritance hierarchy,
            implemented interfaces and applied attributes.
            The type info will be followed by the summary provided in the xml documentation comments.
            </para>
            <para>
            If there are any remarks for the type, a "Remarks" section is added (the section you are currently reading)
            </para>
            <para>
            All of a types constructors will be listed in a table in the "Constructors" section.
            The table contains a row for every constructor displaying the constructors signature
            and summary. As there is a separate page generated that provides more detailed info about the
            constructor, a link to that page is inserted.
            </para>
            <para>
            Similar tables are generated for a type's public fields, events, properties, indexers, methods and operator overloads
            </para>
            <para>
            Links to other members are supported (using the xml tag <c>see</c>), for example a link to 
            <see cref="T:DemoProject.IDemoInterface" />. References to types outside the assembly are written to the output
            but cannot be linked to, e.g. a reference to <see cref="T:System.String"/>
            </para>
            <para>
            The last section is the "See Also" section with links provided in the xml documentation using the <c>seealso</c> tag
            </para>
            <para>
            Similar pages are also generated for interfaces (see <see cref="T:DemoProject.IDemoInterface"/>), structs (see <see cref="T:DemoProject.DemoStruct"/>)
            and enums (see  <see cref="T:DemoProject.DemoEnum"/>)
            </para>
            </remarks>
            <seealso cref="T:DemoProject.IDemoInterface"/>
            <seealso cref="T:DemoProject.IDemoInterface"/>
            <seealso cref="T:DemoProject.DemoStruct">By providing text in the <c>seealso</c> element, the link text can be changed</seealso>   
            <seealso cref="T:System.String">No link can be generated if the referenced type is defined in another assembly (<c>System.String</c> in this case)</seealso>
        </member>
        <member name="F:DemoProject.DemoClass.Field1">
            <summary>
            An example of a public field.
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case a field
            supplementing the information specified in the summary
            </remarks>
            <seealso cref="F:DemoProject.DemoClass.Field2"/>
        </member>
        <member name="F:DemoProject.DemoClass.Field2">
            <summary>
            An example of a public field.
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case a field
            supplementing the information specified in the summary
            </remarks>
            <seealso cref="F:DemoProject.DemoClass.Field1"/>
        </member>
        <member name="E:DemoProject.DemoClass.Event1">
            <summary>
            An example of a public event.
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case an event
            supplementing the information specified in the summary
            </remarks>
            <seealso cref="E:DemoProject.DemoClass.Event2"/>
        </member>
        <member name="E:DemoProject.DemoClass.Event2">
            <summary>
            An example of a public event
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case an event
            supplementing the information specified in the summary
            </remarks>
            <seealso cref="E:DemoProject.DemoClass.Event1"/>
        </member>
        <member name="P:DemoProject.DemoClass.Property1">
            <summary>
            An example of a read-only property.
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case a property
            supplementing the information specified in the summary
            </remarks>
            <seealso cref="P:DemoProject.DemoClass.Property2"/>
        </member>
        <member name="P:DemoProject.DemoClass.Property2">
            <summary>
            An example of a read/write property annotated with a custom attribute
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case, a property
            supplementing the information specified in the summary
            </remarks>
            <seealso cref="P:DemoProject.DemoClass.Property1"/>
        </member>
        <member name="P:DemoProject.DemoClass.Item(System.Int32)">
            <summary>
            An example of an indexer with a single parameter.
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case the indexer.
            supplementing the information specified in the summary.
            <para>
            For overloaded members, there is a separate "Remarks" section for every overload.
            </para>
            </remarks>
            <seealso cref="P:DemoProject.DemoClass.Item(System.Int32,System.Int32)"/>
        </member>
        <member name="P:DemoProject.DemoClass.Item(System.Int32,System.Int32)">
            <summary>
            An example of an indexer with two parameters.
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case the indexer.
            supplementing the information specified in the summary.
            <para>
            For overloaded members, there is a separate "Remarks" section for every overload.
            </para>
            </remarks>
            <seeaslo cref="P:DemoProject.DemoClass.Item(System.Int32)"/>
        </member>
        <member name="M:DemoProject.DemoClass.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:DemoProject.DemoClass"/>
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case the constructor.
            supplementing the information specified in the summary
            </remarks>
        </member>
        <member name="M:DemoProject.DemoClass.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:DemoProject.DemoClass"/> with the specified parameters
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case the constructor.
            supplementing the information specified in the summary
            </remarks>
        </member>
        <member name="M:DemoProject.DemoClass.Method1">
            <summary>
            Example of an overloaded method without parameters
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case a method.
            supplementing the information specified in the summary.
            <para>
            For overloaded members, there is a separate "Remarks" section for every overload.
            </para>
            </remarks>
            <seealso cref="M:DemoProject.DemoClass.Method1(System.String)" />
            <seealso cref="M:DemoProject.DemoClass.Method2" />
        </member>
        <member name="M:DemoProject.DemoClass.Method1(System.String)">
            <summary>
            Example of an overloaded method accepting one parameter.
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case a method.
            supplementing the information specified in the summary.
            <para>
            For overloaded members, there is a separate "Remarks" section for every overload.
            </para>
            </remarks>
            <seealso cref="M:DemoProject.DemoClass.Method1" />
            <seealso cref="M:DemoProject.DemoClass.Method2" />
        </member>
        <member name="M:DemoProject.DemoClass.Method2">
            <summary>
            Example of an non-overloaded methods with a custom attribute-
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case a method.
            supplementing the information specified in the summary.
            </remarks>
            <seealso cref="M:DemoProject.DemoClass.Method1"/>
            <seealso cref="M:DemoProject.DemoClass.Method1(System.String)"/>
        </member>
        <member name="M:DemoProject.DemoClass.op_Addition(DemoProject.DemoClass,DemoProject.DemoClass)">
            <summary>
            Example of an overload of the binary + operator.
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case a method.
            supplementing the information specified in the summary.
            <para>
            For overloaded members, there is a separate "Remarks" section for every overload.
            </para>
            </remarks>
            <seealso cref="M:DemoProject.DemoClass.op_Subtraction(DemoProject.DemoClass,DemoProject.DemoClass)"/>
        </member>
        <member name="M:DemoProject.DemoClass.op_Subtraction(DemoProject.DemoClass,DemoProject.DemoClass)">
            <summary>
            Example of an overload of the binary - operator.
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case a method.
            supplementing the information specified in the summary.
            <para>
            For overloaded members, there is a separate "Remarks" section for every overload.
            </para>
            </remarks>
            <seealso cref="M:DemoProject.DemoClass.op_Addition(DemoProject.DemoClass,DemoProject.DemoClass)"/>
        </member>
        <member name="T:DemoProject.DemoEnum">
            <summary>
            An example of an user-defined enum meant
            </summary>
            <remarks>
            This page demonstrates how the generated documentation for structs looks like.
            The same layout is used for classes, structs, interfaces, and enums.
            <para>
            A more detailed description of type documentation can be seen in the documentation of <see cref="T:DemoProject.DemoClass"/>
            </para>
            <para>
            In contrast to other kinds of types, the definition section for enum does include the list
            of possible values of the enum including the numeric value.
            </para>
            <para>
            Another difference to other types is that for enum values, there won't be generated a separate
            page for every field
            </para>
            </remarks>
            <seealso cref="T:DemoProject.IDemoInterface"/>
            <seealso cref="T:DemoProject.IDemoInterface"/>
            <seealso cref="T:DemoProject.DemoStruct" />
        </member>
        <member name="F:DemoProject.DemoEnum.Item1">
            <summary>
            Enum value "Item1"
            </summary>
            <remarks>
            More detailed information can be provided in the Remarks section
            </remarks>
        </member>
        <member name="F:DemoProject.DemoEnum.Item2">
            <summary>
            Enum value "Item2"
            </summary>
            <remarks>
            More detailed information can be provided in the Remarks section
            </remarks>
        </member>
        <member name="F:DemoProject.DemoEnum.AnotherItem">
            <summary>
            Yet another enum value
            </summary>
            <remarks>
            More detailed information can be provided in the Remarks section
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:DemoProject.DemoPropertyFlags" -->
        <member name="F:DemoProject.DemoPropertyFlags.Flag1">
            <summary>
            Example of an enum value
            </summary>
            <remarks>
            More detailed information can be provided in the Remarks section
            </remarks>
        </member>
        <member name="F:DemoProject.DemoPropertyFlags.Flag2">
            <summary>
            Example of an enum value
            </summary>
            <remarks>
            More detailed information can be provided in the Remarks section
            </remarks>
        </member>
        <member name="F:DemoProject.DemoPropertyFlags.Flag3">
            <summary>
            Example of an enum value
            </summary>
            <remarks>
            More detailed information can be provided in the Remarks section
            </remarks>
        </member>
        <member name="T:DemoProject.DemoPropertyAnnotationAttribute">
            <summary>
            An example of a custom attribute that is used to annotate a property with custom flags.
            </summary>
            <remarks>
            <see cref="T:DemoProject.DemoPropertyAnnotationAttribute"/> showcases the generated documentation for a custom attribute class
            (in this case a attribute applicable to properties).
            The same layout is used for all classes, see <see cref="T:DemoProject.DemoClass"/> for a more detailed description.
            </remarks>
            <seealso cref="P:DemoProject.DemoClass.Property2" />
        </member>
        <member name="M:DemoProject.DemoPropertyAnnotationAttribute.#ctor(DemoProject.DemoPropertyFlags)">
            <summary>
            Initializes a new instance of <see cref="T:DemoProject.DemoPropertyAnnotationAttribute"/>
            </summary>
            <remarks>
            More detailed information can be provided in the Remarks section
            </remarks>
            <param name="flags">The flags to annotate the property with</param>
        </member>
        <member name="T:DemoProject.DemoStruct">
            <summary>
            A struct meant to demonstrate how the generated documentation for structs looks like.
            </summary>
            <remarks>
            This page demonstrates how the generated documentation for structs looks like.
            The same layout is used for classes, structs, interfaces, and enums.
            <para>
            A more detailed description of type documentation can be seen in the documentation of <see cref="T:DemoProject.DemoClass"/>
            </para>
            </remarks>
            <seealso cref="T:DemoProject.IDemoInterface"/>
            <seealso cref="T:DemoProject.IDemoInterface"/>
            <seealso cref="T:DemoProject.DemoStruct" />
        </member>
        <member name="T:DemoProject.IDemoInterface">
            <summary>
            A interface meant to demonstrate how the generated documentation for interfaces looks like.
            </summary>
            <remarks>
            This page demonstrates how the generated documentation for interfaces looks like.
            The same layout is used for classes, structs, interfaces, and enums.
            <para>
            A more detailed description of type documentation can be seen in the documentation of <see cref="T:DemoProject.DemoClass"/>
            </para>
            </remarks>
            <seealso cref="T:DemoProject.IDemoInterface"/>
            <seealso cref="T:DemoProject.IDemoInterface"/>
            <seealso cref="T:DemoProject.DemoStruct" />
        </member>
    </members>
</doc>
