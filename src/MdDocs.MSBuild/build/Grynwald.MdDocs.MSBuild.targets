<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    ============================================================================================================  
      Target "GenerateApiReferenceDocumentation"
    ============================================================================================================    
      Generates API reference docs for the project
  -->
  <Target Name="GenerateApiReferenceDocumentation"
          DependsOnTargets="GetTargetPath"
          Condition=" '$(TargetFramework)' != ''">  <!-- Only run in the "inner" build -->

    <!-- Resolve relative paths -->
    <PropertyGroup>
      <MdDocsConfigurationFilePath Condition=" '$(MdDocsConfigurationFilePath)' != '' ">$([System.IO.Path]::GetFullPath('$(MdDocsConfigurationFilePath)'))</MdDocsConfigurationFilePath>
      <MdDocsCliPath Condition=" '$(MdDocsCliPath)' != '' ">$([System.IO.Path]::GetFullPath('$(MdDocsCliPath)'))</MdDocsCliPath>
      <ApiReferenceDocumentationOutputPath Condition=" '$(ApiReferenceDocumentationOutputPath)' != '' ">$([System.IO.Path]::GetFullPath('$(ApiReferenceDocumentationOutputPath)'))</ApiReferenceDocumentationOutputPath>
      <ApiReferenceDocumentationOutputPath Condition=" '$(ApiReferenceDocumentationOutputPath)' != '' ">$(ApiReferenceDocumentationOutputPath.TrimEnd('\'))</ApiReferenceDocumentationOutputPath>
    </PropertyGroup>

    <PropertyGroup>
      <_MdDocsCommand>dotnet &quot;$(MdDocsCliPath)&quot;</_MdDocsCommand>
      <_MdDocsArgs>apireference</_MdDocsArgs>
      <_MdDocsArgs>$(_MdDocsArgs) --assemblies @(TargetPathWithTargetPlatformMoniker->'&quot;%(FullPath)&quot;', ' ')</_MdDocsArgs>
      <_MdDocsArgs Condition=" '$(ApiReferenceDocumentationOutputPath)' != '' ">$(_MdDocsArgs) --outdir &quot;$(ApiReferenceDocumentationOutputPath)&quot;</_MdDocsArgs>
      <_MdDocsArgs Condition=" '$(MdDocsConfigurationFilePath)' != '' ">$(_MdDocsArgs) --configurationFilePath &quot;$(MdDocsConfigurationFilePath)&quot;</_MdDocsArgs>      
    </PropertyGroup>

    <Message Text="Starting MdDocs with arguments '$(_MdDocsArgs)'"  />
    <Exec Command="$(_MdDocsCommand) $(_MdDocsArgs)" 
          CustomErrorRegularExpression="(ERROR|CRITICAL) - .*"
          CustomWarningRegularExpression="WARNING - .*" />
  </Target>

  <!--
    ============================================================================================================  
      Target "_MdDocs-GenerateApiReferenceDocumentationAfterBuild"
    ============================================================================================================
      Triggers API reference generation after build
      if property 'GenerateApiReferenceDocumentationOnBuild' is set to true
  -->
  <Target Name="_MdDocs-GenerateApiReferenceDocumentationAfterBuild" 
          Condition=" '$(GenerateApiReferenceDocumentationOnBuild)' == 'true' "
          AfterTargets="Build"
          DependsOnTargets="GenerateApiReferenceDocumentation">    
  </Target>

  <!--
    ============================================================================================================  
      Target "GenerateCommandLineDocumentation"
    ============================================================================================================    
      Generates command line docs for the project
  -->
  <Target Name="GenerateCommandLineDocumentation"
          DependsOnTargets="GetTargetPath"
          Condition=" '$(TargetFramework)' != ''">  <!-- Only run in the "inner" build -->

    <!-- Resolve relative paths -->
    <PropertyGroup>
      <MdDocsConfigurationFilePath Condition=" '$(MdDocsConfigurationFilePath)' != '' ">$([System.IO.Path]::GetFullPath('$(MdDocsConfigurationFilePath)'))</MdDocsConfigurationFilePath>
      <MdDocsCliPath Condition=" '$(MdDocsCliPath)' != '' ">$([System.IO.Path]::GetFullPath('$(MdDocsCliPath)'))</MdDocsCliPath>
      <CommandLineDocumentationOutputPath Condition=" '$(CommandLineDocumentationOutputPath)' != '' ">$([System.IO.Path]::GetFullPath('$(CommandLineDocumentationOutputPath)'))</CommandLineDocumentationOutputPath>
      <CommandLineDocumentationOutputPath Condition=" '$(CommandLineDocumentationOutputPath)' != '' ">$(CommandLineDocumentationOutputPath.TrimEnd('\'))</CommandLineDocumentationOutputPath>
    </PropertyGroup>

    <PropertyGroup>
      <_MdDocsCommand>dotnet &quot;$(MdDocsCliPath)&quot;</_MdDocsCommand>
      <_MdDocsArgs>commandlinehelp</_MdDocsArgs>
      <_MdDocsArgs>$(_MdDocsArgs) --assembly @(TargetPathWithTargetPlatformMoniker->'&quot;%(FullPath)&quot;', ' ')</_MdDocsArgs>
      <_MdDocsArgs Condition=" '$(CommandLineDocumentationOutputPath)' != '' ">$(_MdDocsArgs) --outdir &quot;$(CommandLineDocumentationOutputPath)&quot;</_MdDocsArgs>
      <_MdDocsArgs Condition=" '$(MdDocsConfigurationFilePath)' != '' ">$(_MdDocsArgs) --configurationFilePath &quot;$(MdDocsConfigurationFilePath)&quot;</_MdDocsArgs>      
    </PropertyGroup>

    <Message Text="Starting MdDocs with arguments '$(_MdDocsArgs)'"  />
    <Exec Command="$(_MdDocsCommand) $(_MdDocsArgs)" 
          CustomErrorRegularExpression="(ERROR|CRITICAL) - .*"
          CustomWarningRegularExpression="WARNING - .*" />                                      
  </Target>


  <!--
    ============================================================================================================  
      Target "_MdDocs-GenerateCommandLineDocumentationAfterBuild"
    ============================================================================================================
      Triggers command line documentation generation after build if property 
      'GenerateCommandLineDocumentationOnBuild' is set to true
  -->
  <Target Name="_MdDocs-GenerateCommandLineDocumentationAfterBuild"
          Condition=" '$(GenerateCommandLineDocumentationOnBuild)' == 'true' "
          AfterTargets="Build"
          DependsOnTargets="GenerateCommandLineDocumentation">
  </Target>
  
</Project>