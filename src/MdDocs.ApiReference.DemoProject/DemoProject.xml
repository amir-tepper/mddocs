<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DemoProject</name>
    </assembly>
    <members>
        <member name="T:DemoProject.DemoAttribute">
            <summary>
            An example of an custom attribute class for methods
            </summary>
            <remarks>
            This page demonstrates how the generated documentation for attribute classes looks like.
            The same layout is used for all classes, see <see cref="T:DemoProject.DemoClass"/> for a more detailed description
            <para>
            What can be seen on this page is that the definition section includes a type's custom attribute
            including the attribute's constructor parameters, in this case <c>[AttributeUsage(AttributeTargets.Method)]</c>
            </para>
            </remarks>
        </member>
        <member name="T:DemoProject.DemoClass">
            <summary>
            A class meant to demonstrate how the generated documentation looks like.
            </summary>
            <remarks>
            The main purpose of this class is to showcase the generated documentation.
            <para>
            For that purpose, the class aims to include as many code constructs relevant
            for the generated documentation as possible.
            </para>    
            <para>   
            For every type, MdDoc will create a separate markdown page split into multiple sections.
            </para>
            <para>
            The type page starts with the "definition" section that provides basic info about the type.
            This includes the type's namespace and assembly as well as the inheritance hierarchy,
            implemented interfaces and applied attributes.
            The type info will be followed by the summary provided in the xml documentation comments.
            </para>
            <para>
            If there are any remarks for the type, a "Remarks" section is added (the section you are currently reading)
            </para>
            <para>
            All of a types constructors will be listed in a table in the "Constructors" section.
            The table contains a row for every constructor displaying the constructors signature
            and summary. As there is a separate page generated that provides more detailed info about the
            constructor, a link to that page is inserted.
            </para>
            <para>
            Similar tables are generated for a type's public fields, events, properties, indexers, methods and operator overloads
            </para>
            <para>
            Links to other members are supported (using the xml tag <c>see</c>), for example a link to 
            <see cref="T:DemoProject.IDemoInterface" />. References to types outside the assembly are written to the output
            but cannot be linked to, e.g. a reference to <see cref="T:System.String"/>
            To specify the link text, insert content inside the <c>see</c> element,
            for example <c><![CDATA[<see cref="IDemoInterface">Custom text</see>]]></c> which is rendered
            like this: <see cref="T:DemoProject.IDemoInterface">Custom text</see>
            </para>
            <para>
            Additionally, links to websites can be added using the <c>href</c> attribute, for example,
            <c><![CDATA[<see href="http://example.com" />]]></c> is rendered as <see href="http://example.com" /> and
             <c><![CDATA[<see href="http://example.com">Link text</see>]]></c> is rendered as <see href="http://example.com">Link text</see>.
            Note: <c>href</c> is supported by mddocs but is not part of the official specification
            and thus not supported by Visual Studio. When both <c>cref</c> and <c>href</c> attributes are specified,
            the <c>href</c> attribute is ignored.
            </para>
            <para>
            The last section is the "See Also" section with links provided in the xml documentation using the <c>seealso</c> tag.
            Using the <c>cref</c> attribute, links to other members can be added. Additionally, links to websites can be added
            using the <c>href</c> attribute. Note: <c>href</c> is supported by mddocs is but not part of the official specification
            and thus not supported by Visual Studio. When both <c>cref</c> and <c>href</c> attributes are specified,
            the <c>href</c> attribute is ignored.
            </para>
            <para>
            Similar pages are also generated for interfaces (see <see cref="T:DemoProject.IDemoInterface"/>), structs (see <see cref="T:DemoProject.DemoStruct"/>)
            and enums (see  <see cref="T:DemoProject.DemoEnum"/>)
            </para>
            Documentation can also contains list and tables. See <see cref="T:DemoProject.ListExample"/> for a showcase of the different supported list formats.
            </remarks>
            <example>
            Using the <c>example</c> tag, examples on how to use a type can be included in the documentation.
            To specify the language inside of a <c>code</c> element, use the <c>language</c> attribute.
            <code language="csharp">
            // create a new instance of DemoClass
            var instance = new DemoClass();
            </code>
            </example>
            <seealso cref="T:DemoProject.IDemoInterface"/>    
            <seealso cref="T:DemoProject.DemoStruct">By providing text in the <c>seealso</c> element, the link text can be changed</seealso>
            <seealso cref="T:DemoProject.DemoEnum" />
            <seealso cref="T:System.String">No link can be generated if the referenced type is defined in another assembly (<c>System.String</c> in this case)</seealso>
            <seealso cref="T:DemoProject.ListExample"/>
            <seealso href="http://example.com"/>
            <seealso href="http://example.com">External link with custom text</seealso>
        </member>
        <member name="F:DemoProject.DemoClass.Field1">
            <summary>
            An example of a public field.
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case a field
            supplementing the information specified in the summary
            </remarks>
            <value>The tag <c>value</c> allows specifying the value a field represents</value>
            <seealso cref="F:DemoProject.DemoClass.Field2"/>
        </member>
        <member name="F:DemoProject.DemoClass.Field2">
            <summary>
            An example of a public field.
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case a field
            supplementing the information specified in the summary
            </remarks>
            <value>The tag <c>value</c> allows specifying the value a field represents</value>
            <seealso cref="F:DemoProject.DemoClass.Field1"/>
        </member>
        <member name="E:DemoProject.DemoClass.Event1">
            <summary>
            An example of a public event.
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case an event
            supplementing the information specified in the summary
            </remarks>
            <seealso cref="E:DemoProject.DemoClass.Event2"/>
        </member>
        <member name="E:DemoProject.DemoClass.Event2">
            <summary>
            An example of a public event.
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case an event
            supplementing the information specified in the summary
            </remarks>
            <example>
            Using the <c>example</c> tag, examples on how to use a member can be included in the documentation:
            <code language="csharp">
            var instance = new DemoClass();
            instance.Event2 += MyEventHandler;
            </code>
            </example>
            <seealso cref="E:DemoProject.DemoClass.Event1"/>
        </member>
        <member name="P:DemoProject.DemoClass.Property1">
            <summary>
            An example of a read-only property.
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case a property
            supplementing the information specified in the summary
            </remarks>
            <value>The tag <c>value</c> allows specifying the value a property represents</value>
            <exception cref="T:System.ArgumentException">Exceptions can be documented using the <c>exception</c> tag.</exception>
            <exception cref="T:System.InvalidOperationException" />
            <seealso cref="P:DemoProject.DemoClass.Property2"/>
        </member>
        <member name="P:DemoProject.DemoClass.Property2">
            <summary>
            An example of a read/write property annotated with a custom attribute
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case, a property
            supplementing the information specified in the summary
            </remarks>
            <value>The tag <c>value</c> allows specifying the value a property represents</value>
            <seealso cref="P:DemoProject.DemoClass.Property1"/>
        </member>
        <member name="P:DemoProject.DemoClass.Property3">
            <summary>
            An example of an obsolete property.
            </summary>
            <remarks>
            If a member is marked as obsolete using <see cref="T:System.ObsoleteAttribute"/> a warning is included in the generated documentation.
            </remarks>
        </member>
        <member name="P:DemoProject.DemoClass.Item(System.Int32)">
            <summary>
            An example of an indexer with a single parameter.
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case the indexer.
            supplementing the information specified in the summary.
            <para>
            For overloaded members, there is a separate "Remarks" section for every overload.
            </para>
            </remarks>
            <example>
            Using the <c>example</c> tag, examples on how to call a member can be included in the documentation:
            <code language="csharp">
            var instance = new DemoClass();
            var value = instance[42];
            </code>
            </example>
            <param name="index">Description of parameter <paramref name="index"/> provided using the <c>param</c> element.</param>
            <value>The tag <c>value</c> allows specifying the value a indexer represents</value>
            <exception cref="T:System.ArgumentException">Exceptions can be documented using the <c>exception</c> tag.</exception>
            <exception cref="T:System.InvalidOperationException" />
            <seealso cref="P:DemoProject.DemoClass.Item(System.Int32,System.Int32)"/>
        </member>
        <member name="P:DemoProject.DemoClass.Item(System.Int32,System.Int32)">
            <summary>
            An example of an indexer with two parameters.
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case the indexer.
            supplementing the information specified in the summary.
            <para>
            For overloaded members, there is a separate "Remarks" section for every overload.
            </para>
            </remarks>
            <param name="x">Description of parameter <paramref name="x"/> provided using the <c>param</c> element.</param>
            <param name="y">Description of parameter <paramref name="y"/> provided using the <c>param</c> element.</param>
            <value>The tag <c>value</c> allows specifying the value a indexer represents</value>
            <seealso cref="P:DemoProject.DemoClass.Item(System.Int32)"/>
        </member>
        <member name="P:DemoProject.DemoClass.Item(System.Object)">
            <summary>
            An example of an obsolete indexer.
            </summary>
            <remarks>
            If a member is marked as obsolete using <see cref="T:System.ObsoleteAttribute"/> a warning is included in the generated documentation. 
            The documentation also includes the message specified for the obsolete attribute.
            </remarks>
        </member>
        <member name="M:DemoProject.DemoClass.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:DemoProject.DemoClass"/>
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case the constructor.
            supplementing the information specified in the summary
            </remarks>
        </member>
        <member name="M:DemoProject.DemoClass.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:DemoProject.DemoClass"/> with the specified parameters
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case the constructor.
            supplementing the information specified in the summary
            </remarks>      
            <param name="parameter">Description of parameter <paramref name="parameter"/> provided using the <c>param</c> element.</param>
            <exception cref="T:System.ArgumentException">Exceptions can be documented using the <c>exception</c> tag.</exception>
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:DemoProject.DemoClass.Method1">
            <summary>
            Example of an overloaded method without parameters
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case a method.
            supplementing the information specified in the summary.
            <para>
            For overloaded members, there is a separate "Remarks" section for every overload.
            </para>
            </remarks>
            <returns>The return value of a method can be documented using the <c>returns</c> tag</returns>
            <exception cref="T:System.ArgumentException">Exceptions can be documented using the <c>exception</c> tag.</exception>
            <exception cref="T:System.InvalidOperationException" />
            <seealso cref="M:DemoProject.DemoClass.Method1(System.String)" />
            <seealso cref="M:DemoProject.DemoClass.Method2" />
        </member>
        <member name="M:DemoProject.DemoClass.Method1(System.String)">
            <summary>
            Example of an overloaded method accepting one parameter.
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case a method.
            supplementing the information specified in the summary.
            <para>
            For overloaded members, there is a separate "Remarks" section for every overload.
            </para>
            </remarks>
            <param name="parameter">Description of parameter <paramref name="parameter"/> provided using the <c>param</c> element.</param>
            <seealso cref="M:DemoProject.DemoClass.Method1" />
            <seealso cref="M:DemoProject.DemoClass.Method2" />
        </member>
        <member name="M:DemoProject.DemoClass.Method2">
            <summary>
            Example of an non-overloaded methods with a custom attribute.
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case a method.
            supplementing the information specified in the summary.
            </remarks>
            <seealso cref="M:DemoProject.DemoClass.Method1"/>
            <seealso cref="M:DemoProject.DemoClass.Method1(System.String)"/>
        </member>
        <member name="M:DemoProject.DemoClass.Method3``1(``0)">
            <summary>
            Example of a generic method.
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case a method.
            supplementing the information specified in the summary.
            <para>
            For generic methods, the method documentation also includes the type parameters and their description.
            </para>
            </remarks>
            <typeparam name="T">Description of type parameter <typeparamref name="T"/> (specified using the <c>typeparam</c> element)</typeparam>
            <param name="parameter">Description of parameters <paramref name="parameter"/></param>
        </member>
        <member name="M:DemoProject.DemoClass.Method4">
            <summary>
            Example of an obsolete method.
            </summary>
            <remarks>
            If a member is marked as obsolete using <see cref="T:System.ObsoleteAttribute"/> 
            a warning is included in the generated documentation.
            </remarks>
        </member>
        <member name="M:DemoProject.DemoClass.Method5(System.String@)">
            <summary>
            Example of an method with a <c>out</c> parameter.
            </summary>
        </member>
        <member name="M:DemoProject.DemoClass.Method6(System.String@)">
            <summary>
            Example of an method with a <c>ref</c> parameter.
            </summary>
        </member>
        <member name="M:DemoProject.DemoClass.Method7(System.String[]@)">
            <summary>
            Example of an method with a <c>ref</c> parameter.
            </summary>
        </member>
        <member name="M:DemoProject.DemoClass.Method8(System.String@)">
            <summary>
            Example of an method with a <c>in</c> parameter.
            </summary>
        </member>
        <member name="M:DemoProject.DemoClass.Method9(System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Example of an method with a optional parameters.
            </summary>
            <remarks>
            <para>
            The default value for both parameters is shown in the method signature.
            </para>
            </remarks>
            <param name="value1">The <paramref name="value1"/> parameter is optional and has a default value of <c>someString</c>.</param>
            <param name="value2">The <paramref name="value2"/> parameter is optional and has a default value of <c>null</c>.</param>
            <param name="value3">The <paramref name="value3"/> parameter is optional and has a default value of <c>-792281625142643.37593543950335</c>.</param>
            <param name="value4">The <paramref name="value4"/> parameter is optional and has a default value of <c>null</c>.</param>
            <param name="value5">The <paramref name="value5"/> parameter is optional and has a default value of <c>null</c>.</param>
        </member>
        <member name="M:DemoProject.DemoClass.op_Addition(DemoProject.DemoClass,DemoProject.DemoClass)">
            <summary>
            Example of an overload of the binary + operator.
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case a method.
            supplementing the information specified in the summary.
            <para>
            For overloaded members, there is a separate "Remarks" section for every overload.
            </para>
            </remarks>
            <param name="left">Description of parameter <paramref name="left"/> provided using the <c>param</c> element.</param>
            <param name="right">Description of parameter <paramref name="right"/> provided using the <c>param</c> element.</param>
            <returns>The return value of an operator can be documented using the <c>returns</c> tag</returns>
            <seealso cref="M:DemoProject.DemoClass.op_Subtraction(DemoProject.DemoClass,DemoProject.DemoClass)"/>
        </member>
        <member name="M:DemoProject.DemoClass.op_Subtraction(DemoProject.DemoClass,DemoProject.DemoClass)">
            <summary>
            Example of an overload of the binary - operator.
            </summary>
            <remarks>
            Remarks allow specification of more detailed information about a member, in this case a method.
            supplementing the information specified in the summary.
            <para>
            For overloaded members, there is a separate "Remarks" section for every overload.
            </para>
            </remarks>
            <param name="left">Description of parameter <paramref name="left"/> provided using the <c>param</c> element.</param>
            <param name="right">Description of parameter <paramref name="right"/> provided using the <c>param</c> element.</param>
            <returns>The return value of an operator can be documented using the <c>returns</c> tag</returns>
            <exception cref="T:System.ArgumentException">Exceptions can be documented using the <c>exception</c> tag.</exception>
            <exception cref="T:System.InvalidOperationException" />
            <seealso cref="M:DemoProject.DemoClass.op_Addition(DemoProject.DemoClass,DemoProject.DemoClass)"/>
        </member>
        <member name="T:DemoProject.DemoClass`2">
            <summary>
            An example of an generic class.
            </summary>
            <remarks>
            This page demonstrates how the generated documentation for generic types classes looks like.
            The same layout is used for all classes, see <see cref="T:DemoProject.DemoClass"/> for a more detailed description
            <para>
            What can be seen on this page is that the documentation also includes a list of type parameters including
            their documentation.    
            </para>
            </remarks>
            <typeparam name="T1">Description of type parameter <typeparamref name="T1"/> (specified using the <c>typeparam</c> element)</typeparam>
            <typeparam name="T2">Description of type parameter <typeparamref name="T2"/> (specified using the <c>typeparam</c> element)</typeparam>
        </member>
        <member name="T:DemoProject.DemoEnum">
            <summary>
            An example of an user-defined enum meant
            </summary>
            <remarks>
            This page demonstrates how the generated documentation for structs looks like.
            The same layout is used for classes, structs, interfaces, and enums.
            <para>
            A more detailed description of type documentation can be seen in the documentation of <see cref="T:DemoProject.DemoClass"/>
            </para>
            <para>
            In contrast to other kinds of types, the definition section for enum does include the list
            of possible values of the enum including the numeric value.
            </para>
            <para>
            Another difference to other types is that for enum values, there won't be generated a separate
            page for every field
            </para>
            </remarks>
            <seealso cref="T:DemoProject.DemoClass"/>
            <seealso cref="T:DemoProject.IDemoInterface"/>
            <seealso cref="T:DemoProject.DemoStruct" />
        </member>
        <member name="F:DemoProject.DemoEnum.Item1">
            <summary>
            Enum value "Item1"
            </summary>
            <remarks>
            More detailed information can be provided in the Remarks section
            </remarks>
        </member>
        <member name="F:DemoProject.DemoEnum.Item2">
            <summary>
            Enum value "Item2"
            </summary>
            <remarks>
            More detailed information can be provided in the Remarks section
            </remarks>
        </member>
        <member name="F:DemoProject.DemoEnum.AnotherItem">
            <summary>
            Yet another enum value
            </summary>
            <remarks>
            More detailed information can be provided in the Remarks section
            </remarks>
        </member>
        <member name="T:DemoProject.DemoPropertyFlags">
            <summary>
            An example of a "flag" enum
            </summary>
            <remarks>
            <see cref="T:DemoProject.DemoPropertyFlags"/> serves two purposes:
            <para>
            On the one hand it showcases the generated documentation for "flag" enums.
            For flag enums, the numeric values for the possible enum values are represented
            as hexadecimal numbers in contrast to decimal numbers for other enum types.
            </para>
            <para>
            Furthermore, this enum is used in <see cref="T:DemoProject.DemoPropertyAnnotationAttribute"/> and demonstrates
            how custom attributes are included in the documentation for properties (see <see cref="P:DemoProject.DemoClass.Property2"/>)
            </para>
            </remarks>    
            <seealso cref="T:DemoProject.DemoPropertyAnnotationAttribute"/>
            <seealso cref="P:DemoProject.DemoClass.Property2"/>
        </member>
        <member name="F:DemoProject.DemoPropertyFlags.Flag1">
            <summary>
            Example of an enum value
            </summary>
            <remarks>
            More detailed information can be provided in the Remarks section
            </remarks>
        </member>
        <member name="F:DemoProject.DemoPropertyFlags.Flag2">
            <summary>
            Example of an enum value
            </summary>
            <remarks>
            More detailed information can be provided in the Remarks section
            </remarks>
        </member>
        <member name="F:DemoProject.DemoPropertyFlags.Flag3">
            <summary>
            Example of an enum value
            </summary>
            <remarks>
            More detailed information can be provided in the Remarks section
            </remarks>
        </member>
        <member name="T:DemoProject.DemoPropertyAnnotationAttribute">
            <summary>
            An example of a custom attribute that is used to annotate a property with custom flags.
            </summary>
            <remarks>
            <see cref="T:DemoProject.DemoPropertyAnnotationAttribute"/> showcases the generated documentation for a custom attribute class
            (in this case a attribute applicable to properties).
            The same layout is used for all classes, see <see cref="T:DemoProject.DemoClass"/> for a more detailed description.
            </remarks>
            <seealso cref="P:DemoProject.DemoClass.Property2" />
        </member>
        <member name="M:DemoProject.DemoPropertyAnnotationAttribute.#ctor(DemoProject.DemoPropertyFlags)">
            <summary>
            Initializes a new instance of <see cref="T:DemoProject.DemoPropertyAnnotationAttribute"/>
            </summary>
            <remarks>
            More detailed information can be provided in the Remarks section
            </remarks>
            <param name="flags">The flags to annotate the property with</param>
        </member>
        <member name="T:DemoProject.DemoStruct">
            <summary>
            A struct meant to demonstrate how the generated documentation for structs looks like.
            </summary>
            <remarks>
            This page demonstrates how the generated documentation for structs looks like.
            The same layout is used for classes, structs, interfaces, and enums.
            <para>
            A more detailed description of type documentation can be seen in the documentation of <see cref="T:DemoProject.DemoClass"/>
            </para>
            </remarks>
            <seealso cref="T:DemoProject.DemoClass"/>
            <seealso cref="T:DemoProject.IDemoInterface"/>
            <seealso cref="T:DemoProject.DemoEnum" />
        </member>
        <member name="T:DemoProject.IDemoInterface">
            <summary>
            A interface meant to demonstrate how the generated documentation for interfaces looks like.
            </summary>
            <remarks>
            This page demonstrates how the generated documentation for interfaces looks like.
            The same layout is used for classes, structs, interfaces, and enums.
            <para>
            A more detailed description of type documentation can be seen in the documentation of <see cref="T:DemoProject.DemoClass"/>
            </para>
            </remarks>
            <seealso cref="T:DemoProject.DemoClass"/>
            <seealso cref="T:DemoProject.DemoEnum"/>
            <seealso cref="T:DemoProject.DemoStruct" />
        </member>
        <member name="T:DemoProject.ListExample">
            <summary>
            Example class to showcase the different supported list formats.
            </summary>
            <remarks>
            To create a list, use the <c>list</c> tag. Using this tag, bulleted lists, numbered lists and two-column tables can be created.
            <para>
                To create a bulleted list, use the following syntax:
                <code language="xml"><![CDATA[
                    <list type="bullet">
                        <item>
                            <description>Item 1</description>
                        </item>
                        <item>
                            <description>Item 2</description>
                        </item>
                    </list>
                ]]></code>
                which is rendered as like this
                 <list type="bullet">
                        <item>
                            <description>Item 1</description>
                        </item>
                        <item>
                            <description>Item 2</description>
                        </item>
                    </list>
            </para>
            <para>
                By changing the type of the list to "number"
                <code language="xml"><![CDATA[
                    <list type="number">
                        <item>
                            <description>Item 1</description>
                        </item>
                        <item>
                            <description>Item 2</description>
                        </item>
                    </list>
                ]]></code>
                a numbered list will be rendered:
                <list type="number">
                       <item>
                           <description>Item 1</description>
                       </item>
                       <item>
                           <description>Item 2</description>
                       </item>
                   </list>
            </para>
            <para>
                Both numbered and bulleted lists also support items that specify both a <c>description</c> and a <c>term</c>:
                <code language="xml"><![CDATA[
                    <list type="number">
                        <item>
                            <term>Term 1</term>
                            <description>Item 1</description>
                        </item>
                        <item>
                            <term>Term 2</term>
                            <description>Item 2</description>
                        </item>
                    </list>
                ]]></code>
                
                In this case, the value of <c>term</c> will be rendered as bold prefix for the description:
                <list type="number">
                    <item>
                        <term>Term 1</term>
                        <description>Item 1</description>
                    </item>
                    <item>
                        <term>Term 2</term>
                        <description>Item 2</description>
                    </item>
                </list>
            </para>
            <para>
                By changing the type of the list to <c>table</c>, the list will be rendered as two-column table.
                To specify the header row of the table , use <c>listheader</c>
                <code language="xml"><![CDATA[
                    <list type="table">
                        <listheader>
                            <term>Term</term>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>Row 1, Column 1</term>
                            <description>Row 1, Column 2</description>
                        </item>
                        <item>
                            <term>Row 2, Column 1</term>
                            <description>Row 2, Column 2</description>
                        </item>
                    </list>
                ]]></code>
                
                In this case, the value of <c>term</c> will be rendered as bold prefix for the description:
                <list type="table">
                    <listheader>
                        <term>Term</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>Row 1, Column 1</term>
                        <description>Row 1, Column 2</description>
                    </item>
                    <item>
                        <term>Row 2, Column 1</term>
                        <description>Row 2, Column 2</description>
                    </item>
                </list>
            </para>
            </remarks>
        </member>
        <member name="T:DemoProject.NestedTypesDemo">
            <summary>
            This class shows an example of how the documentation for nested types looks.
            </summary>
        </member>
        <member name="T:DemoProject.NestedTypesDemo.NestedClass1">
            <summary>
            This is an example of a nested class
            </summary>
        </member>
        <member name="T:DemoProject.NestedTypesDemo.NestedClass2">
            <summary>
            This is an example of a nested class that in turn contains nested types
            </summary>
        </member>
        <member name="T:DemoProject.NestedTypesDemo.NestedClass2.NestedClass3">
            <summary>
            This is an example of an nested class within a nested class
            </summary>
        </member>
        <member name="T:DemoProject.NestedTypesDemo.NestedInterface1">
            <summary>
            This is an example of a nested interface
            </summary>
        </member>
        <member name="T:DemoProject.ObsoleteDemoClass">
            <summary>
            A class meant to demonstrate how the generated documentation for a deprecated class looks like.
            </summary>
            <remarks>
            If a member is marked as obsolete using <see cref="T:System.ObsoleteAttribute"/> a warning is included in the generated documentation. 
            The documentation also includes the message specified for the obsolete attribute.
            </remarks>
        </member>
    </members>
</doc>
