using System;
using System.Collections.Generic;
using System.Linq;

namespace Grynwald.MdDocs.ApiReference.Model.XmlDocs
{
    /// <summary>
    /// Parser for XML Docs member ids
    /// </summary>
    /// <remarks>
    /// A parser that can pare member ids in XML documentation docs generated by the C# compiler as documented 
    /// here https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/processing-the-xml-file
    /// </remarks>
    internal class MemberIdParser
    {
        private readonly string m_Text;
        private readonly MemberIdLexer m_Lexer;
        private IReadOnlyList<MemberIdToken> m_Tokens;
        private int m_Position;


        private MemberIdToken Current => m_Position >= m_Tokens.Count ? m_Tokens[m_Tokens.Count - 1] : m_Tokens[m_Position];


        public MemberIdParser(string text)
        {
            m_Text = text;
            m_Lexer = new MemberIdLexer(text);
        }


        /// <summary>
        /// Parses the input into a <see cref="MemberId"/>.
        /// </summary>
        /// <exception cref="MemberIdParserException">Thrown when the input could not be parsed.</exception>
        public MemberId Parse()
        {
            try
            {
                m_Tokens = m_Lexer.GetTokens();
            }
            catch (MemberIdLexerException e)
            {
                // rethrow lexer errors as parser errors
                throw new MemberIdParserException("Failed to parse input because of an lexer error", e);
            }
            m_Position = 0;

            // all ids start with a single char that indicates what type if identifier it is (type, method...)
            var kind = MatchToken(MemberIdTokenKind.IdentifierType);
            MatchToken(MemberIdTokenKind.Colon);

            switch (kind)
            {
                case "F":
                    return ParseFieldId();

                case "E":
                    return ParseEventId();

                case "T":
                    return ParseTypeId();

                case "M":
                    return ParseMethodId();

                case "P":
                    return ParsePropertyId();

                case "N":
                    return ParseNamespaceId();

                default:
                    // should not happen as for unknown tokens, MatchToken should already throw
                    throw new NotImplementedException();
            }
        }


        private NamespaceId ParseNamespaceId()
        {
            var nameSegments = ParseNameSegments();
            var namespaceId = new NamespaceId(String.Join(".", nameSegments));

            // all token should be parsed now
            MatchToken(MemberIdTokenKind.Eof);

            return namespaceId;
        }

        private TypeId ParseTypeId()
        {
            // id always starts with a name            
            var nameSegments = ParseNameSegments();

            // optional part: number of type arguments for generic types
            var arity = ParseTypeArity();

            var namespaceName = String.Join(".", nameSegments.Take(nameSegments.Count - 1));
            var typeName = nameSegments[nameSegments.Count - 1];
            var type = CreateTypeId(namespaceName, typeName, arity);

            // if the type if followed by square brackets, the id refers to an array type
            // arrays of arrays are allowed, too
            type = ParseArraySuffix(type);

            // all token should be parsed now
            MatchToken(MemberIdTokenKind.Eof);

            return type;
        }

        private FieldId ParseFieldId()
        {
            var (definingType, name) = ParseFieldOrEventId();
            return new FieldId(definingType, name);
        }

        private EventId ParseEventId()
        {
            var (definingType, name) = ParseFieldOrEventId();
            return new EventId(definingType, name);
        }

        private (TypeId definingType, string name) ParseFieldOrEventId()
        {
            // id always starts with a name                        
            var nameSegments = ParseNameSegments();

            // optional part: type arity
            var typeArity = ParseTypeArity();

            // for generic types, the name of the field or event follows after the arity
            if (typeArity != 0)
            {
                MatchToken(MemberIdTokenKind.Dot);
                nameSegments.Add(MatchToken(MemberIdTokenKind.Name));
            }

            // there shouldn't be anything left after that
            MatchToken(MemberIdTokenKind.Eof);

            return CreateTypeIdFromMemberNameSegments(nameSegments, typeArity);
        }

        private MethodId ParseMethodId()
        {
            // id always starts with a name            
            var nameSegments = ParseNameSegments();

            // optional part: type arity
            var typeArity = ParseTypeArity();

            // for generic types, the name of the method follows after the arity
            if (typeArity != 0)
            {
                MatchToken(MemberIdTokenKind.Dot);
                nameSegments.Add(MatchToken(MemberIdTokenKind.Name));
            }

            // optional part: method arity
            var methodArity = ParseMethodArity();

            // optional part: parameter list
            var methodParameters = ParseParameterList();

            // optional part: return type (only used for overloads of implicit and explicit conversion)
            var methodReturnType = default(TypeId);
            if (TestAndMatchToken(MemberIdTokenKind.Tilde))
            {
                methodReturnType = ParseTypeName();
            }

            // ensure we parsed all tokens
            MatchToken(MemberIdTokenKind.Eof);

            var (definingType, methodName) = CreateTypeIdFromMemberNameSegments(nameSegments, typeArity);

            return new MethodId(definingType, methodName, methodArity, methodParameters, methodReturnType);
        }

        private PropertyId ParsePropertyId()
        {
            // id always starts with a name            
            var nameSegments = ParseNameSegments();

            // optional part: back-tick + number => arity of generic type
            var typeArity = ParseTypeArity();

            // for generic types, the name of the property follows after the arity
            if (typeArity != 0)
            {
                MatchToken(MemberIdTokenKind.Dot);
                nameSegments.Add(MatchToken(MemberIdTokenKind.Name));
            }

            // optional part: parameter list (used for indexers)
            var parameters = ParseParameterList();

            // ensure we parsed all tokens
            MatchToken(MemberIdTokenKind.Eof);

            var (definingType, propertyName) = CreateTypeIdFromMemberNameSegments(nameSegments, typeArity);

            return new PropertyId(definingType, propertyName, parameters ?? Array.Empty<TypeId>());
        }


        private List<string> ParseNameSegments()
        {
            var nameSegments = new List<string>
            {

                // there must be at least one name segment
                MatchToken(MemberIdTokenKind.Name)
            };

            // as long as there are more dots, consume more name segments
            while (Current.Kind == MemberIdTokenKind.Dot)
            {
                MatchToken(MemberIdTokenKind.Dot);
                nameSegments.Add(MatchToken(MemberIdTokenKind.Name));
            }

            return nameSegments;
        }

        private TypeId ParseArraySuffix(TypeId elementType)
        {
            if (Current.Kind != MemberIdTokenKind.OpenSquareBracket)
                return elementType;

            var type = elementType;
            while (Current.Kind == MemberIdTokenKind.OpenSquareBracket)
            {
                MatchToken(MemberIdTokenKind.OpenSquareBracket);

                var dimensions = ParseArrayDimensions();

                MatchToken(MemberIdTokenKind.CloseSquareBracket);

                // wrap type into an array
                type = new ArrayTypeId(type, dimensions);
            }

            return type;
        }

        private int ParseArrayDimensions()
        {
            // the number of dimensions is the number of commas + 1
            var dimensions = 1;

            // optional part: lower bound and size for each dimension, separated by commas
            while (Current.Kind != MemberIdTokenKind.CloseSquareBracket)
            {
                switch (Current.Kind)
                {
                    case MemberIdTokenKind.Comma:
                        MatchToken(MemberIdTokenKind.Comma);
                        dimensions++;
                        break;

                    // lower bound and size are optional
                    // if neither lower bound nor size is known, the colon is omitted as well
                    // this means the following sequences are possible
                    // - lowerBound:size
                    // - lowerBound:
                    // - :size
                    // Both lower bound and size are ignored as they are not required
                    // for identifying a type

                    // case ":size"
                    case MemberIdTokenKind.Colon:
                        MatchToken(MemberIdTokenKind.Colon);
                        MatchToken(MemberIdTokenKind.Number);
                        break;

                    // case "lowerBound:size" and "lowerBound:"
                    case MemberIdTokenKind.Number:
                        MatchToken(MemberIdTokenKind.Number);
                        MatchToken(MemberIdTokenKind.Colon);
                        // optional number token (for the case "lowerBound:")
                        TestAndMatchToken(MemberIdTokenKind.Number);
                        break;

                    default:
                        throw UnexpectedToken(MemberIdTokenKind.Comma, MemberIdTokenKind.Colon, MemberIdTokenKind.Number);
                }
            }

            return dimensions;
        }

        private IReadOnlyList<TypeId> ParseParameterList()
        {
            if (TestAndMatchToken(MemberIdTokenKind.OpenParenthesis))
            {
                var parameters = ParseTypeNameList();
                MatchToken(MemberIdTokenKind.CloseParenthesis);
                return parameters;
            }
            else
            {
                return Array.Empty<TypeId>();
            }
        }

        private IReadOnlyList<TypeId> ParseTypeNameList()
        {
            var parameters = new List<TypeId>();

            // there needs to be at least one type name in the list
            do
            {
                parameters.Add(ParseTypeName());
            }
            while (TestAndMatchToken(MemberIdTokenKind.Comma));

            return parameters;
        }

        private TypeId ParseTypeName()
        {
            TypeId type;
            if (TestAndMatchToken(MemberIdTokenKind.Backtick))
            {
                var index = Int32.Parse(MatchToken(MemberIdTokenKind.Number));
                type = new GenericTypeParameterId(GenericTypeParameterId.MemberKind.Type, index);
            }
            else if (TestAndMatchToken(MemberIdTokenKind.DoubleBacktick))
            {
                var index = Int32.Parse(MatchToken(MemberIdTokenKind.Number));
                type = new GenericTypeParameterId(GenericTypeParameterId.MemberKind.Method, index);
            }
            else
            {
                var nameSegments = ParseNameSegments();

                // optional part: type arguments (enclosed by '{' and '}')
                var typeArguments = default(IReadOnlyList<TypeId>);
                if (TestAndMatchToken(MemberIdTokenKind.OpenBrace))
                {
                    typeArguments = ParseTypeNameList();
                    MatchToken(MemberIdTokenKind.CloseBrace);
                }

                var namespaceName = String.Join(".", nameSegments.Take(nameSegments.Count - 1));
                var typeName = nameSegments[nameSegments.Count - 1];


                if (typeArguments != null)
                {
                    type = new GenericTypeInstanceId(new NamespaceId(namespaceName), typeName, typeArguments);
                }
                else
                {
                    type = new SimpleTypeId(new NamespaceId(namespaceName), typeName);
                }
            }

            // optional part: array declaration
            // if the type if followed by square brackets, the id refers to an array type
            // arrays of arrays are allowed, too
            type = ParseArraySuffix(type);

            return type;
        }

        private int ParseTypeArity() =>
            TestAndMatchToken(MemberIdTokenKind.Backtick) ? Int32.Parse(MatchToken(MemberIdTokenKind.Number)) : 0;

        private int ParseMethodArity() =>
            TestAndMatchToken(MemberIdTokenKind.DoubleBacktick) ? Int32.Parse(MatchToken(MemberIdTokenKind.Number)) : 0;

        private string MatchToken(MemberIdTokenKind kind)
        {
            if (Current.Kind == kind)
            {
                var value = Current.Value;
                m_Position++;
                return value;
            }
            else
            {
                throw UnexpectedToken(kind);
            }
        }

        private bool TestAndMatchToken(MemberIdTokenKind kind)
        {
            if (Current.Kind == kind)
            {
                m_Position++;
                return true;
            }
            else
            {
                return false;
            }
        }

        private MemberIdParserException UnexpectedToken(params MemberIdTokenKind[] expected)
        {
            return new MemberIdParserException($"Unexpected token. Expected {String.Join(",", expected)} but was {Current.Kind}");
        }

        private TypeId CreateTypeId(string namespaceName, string typeName, int arity)
        {
            if (arity > 0)
            {
                return new GenericTypeId(new NamespaceId(namespaceName), typeName, arity);
            }
            else
            {
                return new SimpleTypeId(new NamespaceId(namespaceName), typeName);
            }
        }

        private (TypeId definingType, string memberName) CreateTypeIdFromMemberNameSegments(IReadOnlyList<string> nameSegments, int typeArity)
        {
            // type member name needs at least two name segments (type name + field/event/property/method name)
            if (nameSegments.Count < 2)
                throw new MemberIdParserException("Invalid input, type member name requires name of defining type and member");

            var namespaceName = String.Join(".", nameSegments.Take(nameSegments.Count - 2));
            var typeName = nameSegments[nameSegments.Count - 2];
            var name = nameSegments[nameSegments.Count - 1];

            return (CreateTypeId(namespaceName, typeName, typeArity), name);
        }
    }
}
