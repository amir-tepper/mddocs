using ApprovalTests;
using ApprovalTests.Reporters;
using Grynwald.MarkdownGenerator;
using Grynwald.MdDocs.CommandLineHelp.Configuration;
using Grynwald.MdDocs.CommandLineHelp.Model;
using Grynwald.MdDocs.CommandLineHelp.Templates.Default;
using Grynwald.MdDocs.Common.Configuration;
using Grynwald.MdDocs.TestHelpers;
using Xunit;

namespace Grynwald.MdDocs.CommandLineHelp.Test.Templates.Default
{
    /// <summary>
    /// Tests for <see cref="SingleCommandApplicationPage" />
    /// </summary>
    [Trait("Category", "SkipWhenLiveUnitTesting")]
    [UseReporter(typeof(DiffReporter))]
    public class SingleCommandApplicationPageTest
    {
        [Fact]
        public void GetDocument_returns_expected_document_01()
        {

            var application = new SingleCommandApplicationDocumentation(name: "TestApp", "1.2.3")
            {
                Usage = new[] { "Usage line 1", "Usage line2" }
            };

            application = application
                .WithNamedParameter("parameter1", required: true)
                .WithNamedParameter("parameter2", "x", required: true)
                .WithNamedParameter(null, "y", required: true)
                .WithPositionalParameter(0)
                .WithPositionalParameter(1, informationalName: "Value2", required: true)
                .WithPositionalParameter(2, informationalName: "Value3", description: "Help text for value 3");

            Approve(application);
        }

        [Fact]
        public void GetDocument_returns_expected_document_02()
        {
            var configuration = new ConfigurationProvider().GetDefaultCommandLineHelpConfiguration();
            configuration.Template.Default.IncludeVersion = false;

            var application = new SingleCommandApplicationDocumentation(name: "TestApp", "1.2.3")
            {
                Usage = new[] { "Usage line 1", "Usage line2" }
            };
            application = application.WithNamedParameter("parameter1", required: true);

            Approve(application, configuration);
        }

        [Fact]
        public void GetDocument_returns_expected_Markdown_for_default_settings()
        {
            var configuration = new ConfigurationProvider().GetDefaultCommandLineHelpConfiguration();

            var application = new SingleCommandApplicationDocumentation(name: "TestApp", "1.2.3")
            {
                Usage = new[] { "Usage line 1", "Usage line2" }
            };
            application = application.WithNamedParameter("parameter1", required: true);

            Approve(application, configuration);
        }

        [Fact]
        public void GetDocument_does_not_include_AutoGenerated_notice_if_the_includeAutoGeneratedNotice_setting_is_false()
        {
            var configuration = new ConfigurationProvider().GetDefaultCommandLineHelpConfiguration();
            configuration.Template.Default.IncludeAutoGeneratedNotice = false;

            var application = new SingleCommandApplicationDocumentation(name: "TestApp", "1.2.3")
            {
                Usage = new[] { "Usage line 1", "Usage line2" }
            };
            application = application.WithNamedParameter("parameter1", required: true);

            Approve(application, configuration);
        }

        [Fact]
        public void Command_parameters_are_ordered()
        {
            // Expected parameter order:
            // - Unnamed parameters (ordered by position)
            // - Required Named parameters (ordered by name)
            // - Optional Named parameters (ordered by name)
            // - Switch parameters (ordered by name)            

            var application = new SingleCommandApplicationDocumentation(name: "TestApp", "1.2.3")
            {
                Usage = new[] { "Usage line 1", "Usage line2" }
            };

            application = application
                .WithSwitchParameter("B")
                .WithSwitchParameter(null, "A")
                .WithNamedParameter("paramD", required: true)
                .WithNamedParameter("paramA", required: false)
                .WithNamedParameter("paramC", required: true)
                .WithNamedParameter("paramB", required: false)
                .WithPositionalParameter(position: 2)
                .WithPositionalParameter(position: 1);

            Approve(application);
        }


        private void Approve(SingleCommandApplicationDocumentation model, CommandLineHelpConfiguration? configuration = null)
        {
            var pathProvider = new DefaultCommandLineHelpPathProvider();
            var documentSet = new DocumentSet<IDocument>();

            configuration ??= new ConfigurationProvider().GetDefaultCommandLineHelpConfiguration();

            var applicationPage = new SingleCommandApplicationPage(documentSet, pathProvider, model, configuration);
            documentSet.Add(pathProvider.GetPath(model), applicationPage);

            var doc = applicationPage.GetDocument();

            Assert.NotNull(doc);
            var writer = new ApprovalTextWriter(doc.ToString());
            Approvals.Verify(writer, new ApprovalNamer(relativeOutputDirectory: "../../../_referenceResults"), Approvals.GetReporter());
        }
    }
}
